#lang scheme ; File church-numerals.ss
(require redex "lazy-evaluator.ss" "booleans.ss")
(printf "~a~n" "church-numerals")
(define-syntax test-Church
 (syntax-rules ()
  ((_ numeral expect)
   (test-equal (((ev numeral) (λ (n) (add1 (force n)))) 0) expect))))

(define-syntax Church-numeral->number
 (syntax-rules ()
  ((_ numeral) (((ev numeral) (λ (n) (add1 (force n)))) 0))))

(def C-add1 (λ (n f x) (f (n f x)))) ; Evident.

(def C-sub1 (λ (n f x) (n (λ (g h) (h (g f))) (λ (p) x) (λ (p) p))))
(def C-plus (λ (m n f x) (m f (n f x))))
(def C-mult (λ (m n f) (n (m f))))
(def C-expt (λ (m n) (n m)))
(def C-zero? (λ (n) (n (λ (x) False) True)))
(def C-minus (λ (m n) (n C-sub1 m)))
(def C-eq? (λ (m n) (And (C-zero? (C-minus m n)) (C-zero? (C-minus n m)))))
(def C0 (λ (f x) x))
(def C1 (λ (f x) (f x)))
(def C2 (λ (f x) (f (f x))))
(def C3 (λ (f x) (f (f (f x)))))
(def C4 (λ (f x) (f (f (f (f x))))))
(def C5 (λ (f x) (f (f (f (f (f x)))))))
(def C6 (λ (f x) (f (f (f (f (f (f x))))))))
(def C7 (λ (f x) (f (f (f (f (f (f (f x)))))))))
(def C8 (λ (f x) (f (f (f (f (f (f (f (f x))))))))))
(def C9 (λ (f x) (f (f (f (f (f (f (f (f (f x)))))))))))

(test-Church C0 0)
(test-Church C1 1)
(test-Church C2 2)
(test-Church C3 3)
(test-Church C4 4)
(test-Church C5 5)
(test-Church C6 6)
(test-Church C7 7)
(test-Church C8 8)
(test-Church C9 9)
(test-Church (C-add1 C7) 8)
(test-Church (C-sub1 C7) 6)
(test-Church (C-sub1 C0) 0)
(test-Church (C-plus C5 C7) 12)
(test-Church (C-mult C5 C7) 35)
(test-Church (C-minus C5 C5) 0)
(test-Church (C-minus C7 C5) 2)
(test-Church (C-expt C7 C3) 343)
(test-Church (C-expt C5 C4) 625)
(test-equal (ev (If (C-eq? C7 C5) yes no)) 'no)
(test-equal (ev (If (C-eq? C5 C7) yes no)) 'no)
(test-equal (ev (If (C-eq? C0 C0) yes no)) 'yes)
(test-equal (ev (If (C-eq? C1 C1) yes no)) 'yes)
(test-equal (ev (If (C-eq? C7 C7) yes no)) 'yes)
(test-equal (ev (If (C-zero? (C-minus C5 C5)) yes no)) 'yes)
(test-equal (ev (If (C-zero? (C-minus C5 C7)) yes no)) 'yes)
(test-equal (ev (If (C-zero? (C-minus C5 C4)) yes no)) 'no)

(test-results) ; Displays: All 28 tests passed.
